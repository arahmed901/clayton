{"version":3,"file":"main.5506ca70150a64774d57.hot-update.js","sources":["webpack:///./src/components/HomeListings/HomeListings.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  InfoBar,\r\n  Counter,\r\n  SortContainer,\r\n  CardsContainer,\r\n} from \"./style\";\r\nimport { Select, Button } from \"../Common\";\r\nimport HomeListingCard from \"../HomeListingCard\";\r\nimport listings from \"../../data/listings\";\r\n\r\nconst sortValues = {\r\n  ASCENDING: {\r\n    value: \"ASCENDING\",\r\n    display: \"Price: Low to high\",\r\n  },\r\n  DESCENDING: {\r\n    value: \"DESCENDING\",\r\n    display: \"Price: High to low\",\r\n  },\r\n};\r\n\r\nconst loadListingInterval = 3;\r\n\r\nconst animationVariants = {\r\n  visible: {\r\n    transition: {\r\n      staggerChildren: 0.07,\r\n      delayChildren: 0.2,\r\n    },\r\n  },\r\n  hidden: {\r\n    transition: {\r\n      staggerChildren: 0.05,\r\n      staggerDirection: -1,\r\n    },\r\n  },\r\n};\r\n\r\nexport default () => {\r\n  const [width, setWidth] = useState(0);\r\n  const [sort, updateSort] = useState(sortValues.ASCENDING);\r\n  const [loadCount, updateLoadCount] = useState(0);\r\n  const [initialCount, updateInitialCount] = useState(9);\r\n  const breakpoint = 500;\r\n\r\n  useEffect(() => {\r\n    const handleResizeWindow = () => setWidth(window.innerWidth);\r\n    // subscribe to window resize event \"onComponentDidMount\"\r\n    window.addEventListener(\"resize\", handleResizeWindow);\r\n\r\n    return () => {\r\n      // unsubscribe \"onComponentDestroy\"\r\n      window.removeEventListener(\"resize\", handleResizeWindow);\r\n    };\r\n  }, []);\r\n\r\n  const sortedListings = useMemo(() => {\r\n    const sorted = listings.sort((a, b) => {\r\n      if (sort.value === sortValues.ASCENDING.value) {\r\n        return a.startingPrice > b.startingPrice ? 1 : -1;\r\n      } else {\r\n        return a.startingPrice < b.startingPrice ? 1 : -1;\r\n      }\r\n    });\r\n\r\n    return sorted;\r\n  }, [sort, listings]);\r\n\r\n  const listingsToDisplay = useMemo(() => {\r\n    const totalListingsCount = listings.length;\r\n    const initialLoadCount = initialCount;\r\n    const listingsRequested =\r\n      initialLoadCount + loadCount * loadListingInterval;\r\n\r\n    return sortedListings.slice(\r\n      0,\r\n      listingsRequested > totalListingsCount\r\n        ? totalListingsCount\r\n        : listingsRequested\r\n    );\r\n  }, [sort, loadCount, sortedListings, listings]);\r\n\r\n  const loadMoreListings = () => {\r\n    updateLoadCount((currentLoadCount) => currentLoadCount + 1);\r\n  };\r\n\r\n  const onSortToggle = (newVal) => {\r\n    updateSort(sortValues[newVal]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <InfoBar>\r\n        <Counter>{listings.length} homes available</Counter>\r\n        <SortContainer>\r\n          <label htmlFor=\"sort-toggle\">Sort By</label>\r\n          <Select\r\n            onChange={onSortToggle}\r\n            options={Object.values(sortValues)}\r\n            value={sort.value}\r\n            id=\"sort-toggle\"\r\n          />\r\n        </SortContainer>\r\n      </InfoBar>\r\n      <CardsContainer\r\n        variants={animationVariants}\r\n        initial=\"hidden\"\r\n        animate=\"visible\"\r\n      >\r\n        {listingsToDisplay.map((listing, i) => (\r\n          <HomeListingCard\r\n            listingDetails={listing}\r\n            key={`${listing.homeName}-${listing.sqft}-${listing.startingPrice}-container`}\r\n          />\r\n        ))}\r\n      </CardsContainer>\r\n      <h1>{width}</h1>\r\n      {listingsToDisplay.length < listings.length && (\r\n        <Button onClick={loadMoreListings}>Load More</Button>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAPA;AAeA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}